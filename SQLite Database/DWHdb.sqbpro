<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Dell/Desktop/DWH/DWHdb.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2956"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,4:mainUser"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1">-- Create User Table
CREATE TABLE &quot;User&quot; (
  UserID SERIAL PRIMARY KEY,
  Name VARCHAR(255),
  Email VARCHAR(255),
  Gender VARCHAR(10),
  Age INT,
  PhoneNumber VARCHAR(20),
  DateOfBirth DATE,
  DateJoined DATE,
  IsEmployee BOOLEAN
);
SELECT * FROM &quot;User&quot;;



 -- Create Owner Table
CREATE TABLE &quot;Owner&quot; (
  OwnerId SERIAL PRIMARY KEY,
  NoOfProperties INT,
  UserID INT,
  CONSTRAINT fk_owner_user FOREIGN KEY (UserID) REFERENCES &quot;User&quot;(UserID)
);
SELECT * FROM &quot;Owner&quot;;

-- Create Employee Table
CREATE TABLE &quot;Employee&quot; (
  EmployeeId SERIAL PRIMARY KEY,
  Name VARCHAR(255),
  Email VARCHAR(255),
  PhoneNum VARCHAR(20),
  Supervisor INT
);
SELECT * FROM &quot;Employee&quot;;

-- Create Customer Table
CREATE TABLE &quot;Customer&quot; (
  CustomerId SERIAL PRIMARY KEY,
  Name VARCHAR(255),
  Email VARCHAR(255),
  PhoneNum VARCHAR(20),
  UserID INT,
  CONSTRAINT fk_customer_user FOREIGN KEY (UserID) REFERENCES &quot;User&quot;(UserID)
);
SELECT * FROM &quot;Customer&quot;;

-- Create Location Table
CREATE TABLE &quot;Location&quot; (
  LocationID SERIAL PRIMARY KEY,
  City VARCHAR(255),
  Country VARCHAR(255),
  Continent VARCHAR(255),
  Zip VARCHAR(20),
  State VARCHAR(255)
);
SELECT * FROM &quot;Location&quot;;

-- Create Property Table
CREATE TABLE &quot;Property&quot; (
  PropertyID SERIAL PRIMARY KEY,
  Name VARCHAR(255),
  Type VARCHAR(50),
  PropertyDesc VARCHAR(1000),
  Price DECIMAL(10, 2),
  City VARCHAR(255),
  Zip VARCHAR(20),
  State VARCHAR(255),
  CountryID INT,
  CONSTRAINT fk_property_location FOREIGN KEY (CountryID) REFERENCES &quot;Location&quot;(LocationID)
);
SELECT * FROM &quot;Property&quot;;

-- Create Booking Table
CREATE TABLE &quot;Booking&quot; (
  BookingID SERIAL PRIMARY KEY,
  CheckInDate DATE,
  CheckOutDate DATE,
  GuestCount INT,
  BookingType VARCHAR(50),
  Supervisor INT,
  CustomerId INT,
  PropertyID INT,
  CONSTRAINT fk_booking_customer FOREIGN KEY (CustomerId) REFERENCES &quot;Customer&quot;(CustomerId),
  CONSTRAINT fk_booking_property FOREIGN KEY (PropertyID) REFERENCES &quot;Property&quot;(PropertyID)
);
SELECT * FROM &quot;Booking&quot;;

-- Create Review Table
CREATE TABLE &quot;Review&quot; (
  ReviewID SERIAL PRIMARY KEY,
  Rating INT,
  Comment VARCHAR(1000),
  BookingID INT,
  CONSTRAINT fk_review_booking FOREIGN KEY (BookingID) REFERENCES &quot;Booking&quot;(BookingID)
);
SELECT * FROM &quot;Review&quot;;

-- Create Amenity Table
CREATE TABLE &quot;Amenity&quot; (
  AmenityID SERIAL PRIMARY KEY,
  Name VARCHAR(255),
  Details VARCHAR(1000),
  PropertyId INT,
  CONSTRAINT fk_amenity_property FOREIGN KEY (PropertyId) REFERENCES &quot;Property&quot;(PropertyID)
);
SELECT * FROM &quot;Amenity&quot;;

-- Create Category Table
CREATE TABLE &quot;Category&quot; (
  CategoryID SERIAL PRIMARY KEY,
  Name VARCHAR(255),
  RoomType VARCHAR(1000),
  RoomSize VARCHAR(1000),
  RoomFeatures VARCHAR(1000),
  PropertyId INT,
  BookingId  INT,
  CONSTRAINT fk_category_property FOREIGN KEY (PropertyId) REFERENCES &quot;Property&quot;(PropertyID),
  CONSTRAINT fk_category_booking FOREIGN KEY (BookingId) REFERENCES &quot;Booking&quot;(BookingID)
);
SELECT * FROM &quot;Category&quot;;

-- Create Cards Table
CREATE TABLE &quot;Cards&quot; (
  CardID SERIAL PRIMARY KEY,
  CardName VARCHAR(255),
  CardNum VARCHAR(1000),
  CardComp VARCHAR(1000),
  CardExp VARCHAR(1000),
  CustomerId INT,
  PaymentId  INT,
  CONSTRAINT fk_cards_customer FOREIGN KEY (CustomerId) REFERENCES &quot;Customer&quot;(CustomerID),
  CONSTRAINT fk_cards_payment FOREIGN KEY (PaymentId) REFERENCES &quot;Payment&quot;(PaymentID)
);
SELECT * FROM &quot;Cards&quot;;

-- Create Promotion Table
CREATE TABLE &quot;Promotion&quot; (
  PromotionID SERIAL PRIMARY KEY,
  PromotionName VARCHAR(255),
  Description VARCHAR(1000),
  DiscountPercentage DECIMAL(5, 2),
  StartDate DATE,
  EndDate DATE
);
SELECT * FROM &quot;Promotion&quot;;

-- Create Coupon Table
CREATE TABLE &quot;Coupon&quot; (
  CouponID SERIAL PRIMARY KEY,
  PromotionID INT,
  CouponCode VARCHAR(50),
  DiscountAmount DECIMAL(10, 2),
  ExpiryDate DATE,
  CONSTRAINT fk_coupon_promotion FOREIGN KEY (PromotionID) REFERENCES &quot;Promotion&quot;(PromotionID)
);
SELECT * FROM &quot;Coupon&quot;;

-- Create PaymentMethod Table
CREATE TABLE &quot;PaymentMethod&quot; (
  MethodID SERIAL PRIMARY KEY,
  CustomerId INT,
  MethodName VARCHAR(50),
  AccountNumber VARCHAR(255),
  Description VARCHAR(255),
  CONSTRAINT fk_payment_method_customer FOREIGN KEY (CustomerId) REFERENCES &quot;Customer&quot;(CustomerID)
);
SELECT * FROM &quot;PaymentMethod&quot;;

-- Create Payment Table
CREATE TABLE &quot;Payment&quot; (
  PaymentID SERIAL PRIMARY KEY,
  Amount DECIMAL(10, 2),
  PaymentDate DATE,
  BookingID INT,
  CustomerId INT,
  MethodID INT,
  CONSTRAINT fk_payment_booking FOREIGN KEY (BookingID) REFERENCES &quot;Booking&quot;(BookingID),
  CONSTRAINT fk_payment_customer FOREIGN KEY (CustomerId) REFERENCES &quot;Customer&quot;(CustomerID),
  CONSTRAINT fk_payment_method FOREIGN KEY (MethodID) REFERENCES &quot;PaymentMethod&quot;(MethodID)
);

-- Create BookingHistory Table
CREATE TABLE &quot;BookingHistory&quot; (
  BookingHistoryId SERIAL PRIMARY KEY,
  BookingID INT,
  CustomerId INT,
  PropertyID INT,
  CheckInDate DATE,
  CheckOutDate DATE,
  TotalCost DECIMAL(10, 2),
  CONSTRAINT fk_booking_history_booking FOREIGN KEY (BookingID) REFERENCES &quot;Booking&quot;(BookingID),
  CONSTRAINT fk_booking_history_customer FOREIGN KEY (CustomerId) REFERENCES &quot;Customer&quot;(CustomerID),
  CONSTRAINT fk_booking_history_property FOREIGN KEY (PropertyID) REFERENCES &quot;Property&quot;(PropertyID)
);
SELECT * FROM &quot;BookingHistory&quot;;

-- Create Wishlist Table
CREATE TABLE &quot;Wishlist&quot; (
  WishListID SERIAL PRIMARY KEY,
  CustomerID INT,
  PropertyID INT,
  Details VARCHAR,
  Timestamp TIMESTAMP,
  CONSTRAINT fk_wishlist_customer FOREIGN KEY (CustomerID) REFERENCES &quot;Customer&quot;(CustomerID),
  CONSTRAINT fk_wishlist_property FOREIGN KEY (PropertyID) REFERENCES &quot;Property&quot;(PropertyID)
);
SELECT * FROM &quot;Wishlist&quot;;

-- Create Discount Table
CREATE TABLE &quot;Discount&quot; (
  DiscountId SERIAL PRIMARY KEY,
  Discountpercent DECIMAL(5, 2),
  Valid BOOLEAN
);

-- Create CouponRedemption Table
CREATE TABLE &quot;CouponRedemption&quot; (
  CouponId INT,
  CustomerId INT,
  BookingId INT,
  RedemptionDate DATE,
  CONSTRAINT fk_coupon_redemption_coupon FOREIGN KEY (CouponId) REFERENCES &quot;Coupon&quot;(CouponId),
  CONSTRAINT fk_coupon_redemption_customer FOREIGN KEY (CustomerId) REFERENCES &quot;Customer&quot;(CustomerID),
  CONSTRAINT fk_coupon_redemption_booking FOREIGN KEY (BookingId) REFERENCES &quot;Booking&quot;(BookingID)
);

-- Create BookingPromotion Table
CREATE TABLE &quot;BookingPromotion&quot; (
  PromotionId INT,
  BookingId INT,
  CONSTRAINT fk_booking_promotion_promotion FOREIGN KEY (PromotionId) REFERENCES &quot;Promotion&quot;(PromotionID),
  CONSTRAINT fk_booking_promotion_booking FOREIGN KEY (BookingId) REFERENCES &quot;Booking&quot;(BookingID)
);
SELECT * FROM &quot;BookingPromotion&quot;;

</sql><current_tab id="0"/></tab_sql></sqlb_project>
